<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.2">
  <help_text>// Uncomment the following line to change the fontsize:
// fontsize=14


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on UML elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use ± or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>8</zoom_level>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>0</x>
      <y>232</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>// Actor -is a special case- of another Actor
lt=&lt;-
ISA</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>0</x>
      <y>248</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>// Position -covers- Roles
lt=&lt;-
Covers</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>0</x>
      <y>264</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
Is part of</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>0</x>
      <y>280</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>// Agent -occupies- Position
lt=&lt;-
Occupies</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>0</x>
      <y>296</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>// Agent -plays- Role
lt=&lt;-
Plays</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>0</x>
      <y>312</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>// Instance of a more general entity
lt=&lt;-
INS</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>208</x>
      <y>232</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>// Dependency Link
lt=-
D</panel_attributes>
    <additional_attributes>24;40;104;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>208</x>
      <y>264</y>
      <w>120</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>// Means-Ends Link
lt=&gt;&gt;&gt;&gt;&gt;
</panel_attributes>
    <additional_attributes>24;24;104;24</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>216</x>
      <y>280</y>
      <w>40</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>// Decomposition Link
lt=-
r1=—
//r1=| </panel_attributes>
    <additional_attributes>24;24;24;80</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>104</x>
      <y>232</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>// strong enough to satisfice
// a softgoal
lt=&lt;-
Make</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>104</x>
      <y>248</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
Some +</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>104</x>
      <y>264</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>// positive but not sufficient to 
// satisfice a softgoal
lt=&lt;-
Help</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>104</x>
      <y>280</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
Unknown</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>104</x>
      <y>296</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>// sufficient enough to deny
// a softgoal
lt=&lt;-
Break</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>104</x>
      <y>312</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
Some -</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>104</x>
      <y>328</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>// Negative but not sufficient to
// deny the softgoal
lt=&lt;-
Hurt</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>104</x>
      <y>344</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
Or</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>104</x>
      <y>360</y>
      <w>120</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
And</panel_attributes>
    <additional_attributes>104;40;24;40</additional_attributes>
  </element>
  <element>
    <type>com.baselet.element.old.element.Text</type>
    <coordinates>
      <x>16</x>
      <y>224</y>
      <w>80</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>/Actor/
/associations:/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Text</type>
    <coordinates>
      <x>224</x>
      <y>224</y>
      <w>88</w>
      <h>32</h>
    </coordinates>
    <panel_attributes> 
/Links:/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Text</type>
    <coordinates>
      <x>120</x>
      <y>224</y>
      <w>88</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>/Element/
/contributions:/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>64</x>
      <y>168</y>
      <w>57</w>
      <h>57</h>
    </coordinates>
    <panel_attributes>// Actor Boundary
</panel_attributes>
    <additional_attributes/>
    <custom_code>allowResize(true);
setBackgroundColor("bg");
setForegroundColor("fg");

setLineType(1);
drawEllipse(width / 2, height / 2, width / 2, height / 2);

int y = (height / 2) - ((textHeight() * textlines.size() * 2) / 3);
for(String textline : textlines) {
	y = y + textHeight();
	printCenter(textline, y);
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>96</x>
      <y>32</y>
      <w>65</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>bg=#ceffce
Task</panel_attributes>
    <additional_attributes/>
    <custom_code>int z = width / 5;
Polygon p = new Polygon();
p.addPoint(0, height / 2);
p.addPoint(z, 0);
p.addPoint(width - z, 0);
p.addPoint(width, height / 2);
p.addPoint(width - z, height);
p.addPoint(z, height);
p.addPoint(0, height / 2);
drawPolygon(p);

int th = textHeight();
int n  = textlines.size();
int y  = (height / 2) - ((th * n) / 2) + (int)(th * 0.85);

for (String textline : textlines)
{
	printCenter(textline,y);
	y += th;
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>168</x>
      <y>32</y>
      <w>65</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>Belief</panel_attributes>
    <additional_attributes/>
    <custom_code>allowResize(true);

drawEllipse(width / 2, height / 2, width / 2, height / 2);

int th = textHeight();
int n  = textlines.size();
int y  = (height / 2) - ((th * n) / 2) + (int)(th * 0.85);

for (String textline : textlines)
{
	printCenter(textline, y);
	y += th;
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>96</x>
      <y>80</y>
      <w>65</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>bg=#ceffce
Resource</panel_attributes>
    <additional_attributes/>
    <custom_code>drawRectangle(0,0,width,height);

int th = textHeight();
int n  = textlines.size();
int y  = (height / 2) - ((th * n) / 2) + (int)(th * 0.85);

for (String textline : textlines) 
{
	printCenter(textline,y);
	y += th;
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>24</x>
      <y>128</y>
      <w>65</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>// Any unit to which intentional
// dependencies can be ascribed
bg=#ceffce
*Actor*</panel_attributes>
    <additional_attributes/>
    <custom_code>allowResize(true);

String TYPE_INDICATOR = "--";
int      posTypeInd = textlines.indexOf(TYPE_INDICATOR);
boolean isAgent = posTypeInd &gt; -1 &amp;&amp; posTypeInd &lt; textlines.size() / 2;
boolean isRole   = posTypeInd &gt; -1 &amp;&amp; posTypeInd &gt;= textlines.size() / 2;
if (posTypeInd &gt; -1) textlines.remove(posTypeInd);


double radius = min(height, width)  / 2; 
int mX            = width / 2;
int mY            = height / 2;
drawCircle(mX, mY, (int) radius);


if (isAgent)
{
	int lineX = 1 + mX + (int) Math.round(radius * Math.cos(Math.toRadians(150)));
	int lineY = mY - (int) Math.round(radius * Math.sin(Math.toRadians(150)));
	drawLine(lineX, lineY, width - lineX, lineY);
}

if (isRole)
{
	int lineX = 1 + mX + (int) Math.round(radius * Math.cos(Math.toRadians(210)));
	int lineY = mY - (int) Math.round(radius * Math.sin(Math.toRadians(210)));
	drawCurveQuad(
			lineX, lineY, 
			mX, lineY + (int)(radius / 2), 
			width - lineX + 1, lineY);
}



int th = textHeight();
int n  = textlines.size();
int y  = (height / 2) - ((th * n) / 2) + (int)(th * 0.85);
int tw, x;

for (String textline : textlines) 
{
	printCenter(textline, y);
	y += th;
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>96</x>
      <y>128</y>
      <w>65</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>// Concrete, physical actor, such as a 
// human individual or a hard/software.
bg=#ceffce
--
*Agent*</panel_attributes>
    <additional_attributes/>
    <custom_code>allowResize(true);

String TYPE_INDICATOR = "--";
int      posTypeInd = textlines.indexOf(TYPE_INDICATOR);
boolean isAgent = posTypeInd &gt; -1 &amp;&amp; posTypeInd &lt; textlines.size() / 2;
boolean isRole   = posTypeInd &gt; -1 &amp;&amp; posTypeInd &gt;= textlines.size() / 2;
if (posTypeInd &gt; -1) textlines.remove(posTypeInd);


double radius = min(height, width)  / 2; 
int mX            = width / 2;
int mY            = height / 2;
drawCircle(mX, mY, (int) radius);


if (isAgent)
{
	int lineX = 1 + mX + (int) Math.round(radius * Math.cos(Math.toRadians(150)));
	int lineY = mY - (int) Math.round(radius * Math.sin(Math.toRadians(150)));
	drawLine(lineX, lineY, width - lineX, lineY);
}

if (isRole)
{
	int lineX = 1 + mX + (int) Math.round(radius * Math.cos(Math.toRadians(210)));
	int lineY = mY - (int) Math.round(radius * Math.sin(Math.toRadians(210)));
	drawCurveQuad(
			lineX, lineY, 
			mX, lineY + (int)(radius / 2), 
			width - lineX + 1, lineY);
}



int th = textHeight();
int n  = textlines.size();
int y  = (height / 2) - ((th * n) / 2) + (int)(th * 0.85);
int tw, x;

for (String textline : textlines) 
{
	printCenter(textline, y);
	y += th;
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>168</x>
      <y>128</y>
      <w>65</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>// Played by one or multiple actors 
// within some specialized context 
// or domain of endeavor
bg=#ceffce
*Role*
--</panel_attributes>
    <additional_attributes/>
    <custom_code>allowResize(true);

String TYPE_INDICATOR = "--";
int      posTypeInd = textlines.indexOf(TYPE_INDICATOR);
boolean isAgent = posTypeInd &gt; -1 &amp;&amp; posTypeInd &lt; textlines.size() / 2;
boolean isRole   = posTypeInd &gt; -1 &amp;&amp; posTypeInd &gt;= textlines.size() / 2;
if (posTypeInd &gt; -1) textlines.remove(posTypeInd);


double radius = min(height, width)  / 2; 
int mX            = width / 2;
int mY            = height / 2;
drawCircle(mX, mY, (int) radius);


if (isAgent)
{
	int lineX = 1 + mX + (int) Math.round(radius * Math.cos(Math.toRadians(150)));
	int lineY = mY - (int) Math.round(radius * Math.sin(Math.toRadians(150)));
	drawLine(lineX, lineY, width - lineX, lineY);
}

if (isRole)
{
	int lineX = 1 + mX + (int) Math.round(radius * Math.cos(Math.toRadians(210)));
	int lineY = mY - (int) Math.round(radius * Math.sin(Math.toRadians(210)));
	drawCurveQuad(
			lineX, lineY, 
			mX, lineY + (int)(radius / 2), 
			width - lineX + 1, lineY);
}



int th = textHeight();
int n  = textlines.size();
int y  = (height / 2) - ((th * n) / 2) + (int)(th * 0.85);
int tw, x;

for (String textline : textlines) 
{
	printCenter(textline, y);
	y += th;
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>240</x>
      <y>128</y>
      <w>65</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>// Intermediate between role and agent
// Set of roles played by one agent
bg=#ceffce
*Position*</panel_attributes>
    <additional_attributes/>
    <custom_code>allowResize(true);

drawCurveCubic(
		width / 4, height / 4,
		width / 4, -(height / 12),
		width - (width / 4), -(height / 12),
		width - (width / 4), height / 4);

drawCurveCubic(
		width / 4, height / 4,
		-(width / 12), height / 4,
		-(width / 12), height - (height / 4),
		width / 4, height - (height / 4));
		
drawCurveCubic(
		width / 4, height - (height / 4),
		width / 4, height + (height / 12),
		width - (width / 4), height + (height / 12),
		width - (width / 4), height - (height / 4));

drawCurveCubic(
		width - (width / 4), height / 4,
		width + (width / 12), height / 4,
		width + (width / 12), height - (height / 4),
		width - (width / 4), height - (height / 4));


setLineThickness(1);
Color alphaBug = new Color(
		bgColor.getRed()   + 17,
		bgColor.getGreen() + 0,
		bgColor.getBlue()  + 17);
String fg = "#" + Integer.toHexString(alphaBug.getRGB()).substring(2);
	
setForegroundColor(fg);
drawRectangle(width / 4, height / 4, width / 2, height / 2);


int th = textHeight();
int n  = textlines.size();
int y  = (height / 2) - ((th * n) / 2) + (int)(th * 0.85);
int tw, x;

for (String textline : textlines) 
{
	printCenter(textline, y);
	y += th;
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>24</x>
      <y>80</y>
      <w>65</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>bg=#ceffce
Softgoal
~~</panel_attributes>
    <additional_attributes/>
    <custom_code>String SOFTGOAL_INDICATOR = "~~";
int posSoftGoalInd = textlines.indexOf(SOFTGOAL_INDICATOR);
boolean isSoftGoal = posSoftGoalInd &gt; -1;
if (posSoftGoalInd &gt; -1) textlines.remove(posSoftGoalInd);

if (! isSoftGoal)
{
	drawRectangleRound(0, 0, width, height, width / 2, height);
}
else // Soft Goal
{
	
	// Filling polygon
	
	setLineThickness(1);
	Color alphaBug = new Color(
			bgColor.getRed()   + 17,
			bgColor.getGreen() + 0,
			bgColor.getBlue()  + 17);
	String fg = "#" + Integer.toHexString(alphaBug.getRGB()).substring(2);
	
	setForegroundColor(fg);
	Polygon p = new Polygon();
	p.addPoint(0, height / 2);
	p.addPoint(width / 6, 0);
	p.addPoint(width / 2, height / 8);
	p.addPoint(width - (width / 6), 0);
	p.addPoint(width, height / 2);
	p.addPoint(width - (width / 6), height);
	p.addPoint(width / 2, height - (height / 8));
	p.addPoint(width / 6, height);
	drawPolygon(p);

	resetAll();
	
	// Curves upper half

	drawCurveQuad(
			0, height / 2,
			0, 0,
			width / 6, 0);
	
	drawCurveQuad(
			width / 6, 0,
			width / 3, 0,
			(width / 2), (height / 8));
	
	drawCurveQuad(
			width / 2, (height / 8),
			width - (width / 3), 0,
			width - (width / 6), 0);
	
	drawCurveQuad(
			width - (width / 6), 0,
			width, 0,
			width, height / 2);
	
	// Curves lower half
	
	drawCurveQuad(
			0, height - (height / 2),
			0, height,
			width / 6, height);
	
	drawCurveQuad(
			width / 6, height,
			width / 3, height,
			width / 2, height - (height / 8));
	
	drawCurveQuad(
			width / 2, height - (height / 8),
			width - (width / 3), height,
			width - (width / 6), height);
	
	drawCurveQuad(
			width - (width / 6), height,
			width, height,
			width, height - (height / 2));
}
	
	
// Caption

int th = textHeight();
int n  = textlines.size();
int y  = (height / 2) - ((th * n) / 2) + (int)(th * 0.85);

for (String textline : textlines) 
{
	printCenter(textline,y);
	y += th;
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>24</x>
      <y>32</y>
      <w>65</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>bg=#ceffce
Softgoal</panel_attributes>
    <additional_attributes/>
    <custom_code>String SOFTGOAL_INDICATOR = "~~";
int posSoftGoalInd = textlines.indexOf(SOFTGOAL_INDICATOR);
boolean isSoftGoal = posSoftGoalInd &gt; -1;
if (posSoftGoalInd &gt; -1) textlines.remove(posSoftGoalInd);

if (! isSoftGoal)
{
	drawRectangleRound(0, 0, width, height, width / 2, height);
}
else // Soft Goal
{
	
	// Filling polygon
	
	setLineThickness(1);
	Color alphaBug = new Color(
			bgColor.getRed()   + 17,
			bgColor.getGreen() + 0,
			bgColor.getBlue()  + 17);
	String fg = "#" + Integer.toHexString(alphaBug.getRGB()).substring(2);
	
	setForegroundColor(fg);
	Polygon p = new Polygon();
	p.addPoint(0, height / 2);
	p.addPoint(width / 6, 0);
	p.addPoint(width / 2, height / 8);
	p.addPoint(width - (width / 6), 0);
	p.addPoint(width, height / 2);
	p.addPoint(width - (width / 6), height);
	p.addPoint(width / 2, height - (height / 8));
	p.addPoint(width / 6, height);
	drawPolygon(p);

	resetAll();
	
	// Curves upper half

	drawCurveQuad(
			0, height / 2,
			0, 0,
			width / 6, 0);
	
	drawCurveQuad(
			width / 6, 0,
			width / 3, 0,
			(width / 2), (height / 8));
	
	drawCurveQuad(
			width / 2, (height / 8),
			width - (width / 3), 0,
			width - (width / 6), 0);
	
	drawCurveQuad(
			width - (width / 6), 0,
			width, 0,
			width, height / 2);
	
	// Curves lower half
	
	drawCurveQuad(
			0, height - (height / 2),
			0, height,
			width / 6, height);
	
	drawCurveQuad(
			width / 6, height,
			width / 3, height,
			width / 2, height - (height / 8));
	
	drawCurveQuad(
			width / 2, height - (height / 8),
			width - (width / 3), height,
			width - (width / 6), height);
	
	drawCurveQuad(
			width - (width / 6), height,
			width, height,
			width, height - (height / 2));
}
	
	
// Caption

int th = textHeight();
int n  = textlines.size();
int y  = (height / 2) - ((th * n) / 2) + (int)(th * 0.85);

for (String textline : textlines) 
{
	printCenter(textline,y);
	y += th;
}</custom_code>
  </element>
</diagram>
